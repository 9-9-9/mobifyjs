<script type="text/javascript" id="mobify-combo-client">
(function(){
/**
 * Combo Client - An interface around jsonp loaded http resources
 */

    window.Mobify || (window.Mobify = {});
    window.Mobify.combo || (window.Mobify.combo = {});
    window.Mobify.combo.resources || (window.Mobify.combo.resources = {});
    window.Mobify.combo.cacheName = "Mobify-Combo-Cache-v1.0";

    /** 
     * localStorage based caching of the resources object
     */

    var localStorageAvailable = (function() {
        try {
            localStorage.setItem(mod, mod);
            localStorage.removeItem(mod);
            return true;
        } catch(e) {
            return false;
        }
    }());

    /**
     * Get keys out of the localStorage cache and into our in-memory reosurce 
     * dictionary,
     */
    window.Mobify.combo.rehydrateCache || (window.Mobify.combo.rehydrateCache = function() {
        var resources = window.Mobify.combo.resources;

        if(localStorageAvailable) {
            /* get stuff out of the cache */
            var r, i, cacheContents = localStorage.getItem("Mobify-Combo-Cache");
            if(cacheContents !== null) {
                try {
                    cacheContents = JSON.parse(cacheContents);
                } catch(e) {
                    console.log('Mobify.combo.rehydrateCache: error parsing localStorage[' + 
                        Mobify.combo.cacheName + ']: ', e.message);
                    return;
                }
                /* iterate through and extract any keys that aren't already loaded */
                for(i in cacheContents) {
                    if(cacheContents.hasOwnProperty(i) && !resources[i]){
                        resources[i] = cacheContents[i];
                    }
                }
            }
        }
    });

    /**
     * Store keys from the local reource dictionary back into the localStorage 
     * cache.
     */
    window.Mobify.combo.dehydrateCache || (window.Mobify.combo.dehydrateCache = function(){
        var resources = Mobify.combo.resources
            ,MAX_ATTEMPTS = 10
            ,toBeCached = {}
            ,serialized;
        
        /* asynchronously "recursive" function that attempts to whittle down a 
           cache to a storeable size */
        function evictAndStore(resources, attempts) {
            var serialzed;
            if(attempts == 0) {
                console.log('Mobify.combo.dehydrateCache: evict and store attempts exceeded, aborting');
            } else {
                /* get rid of something */
                evictOne(resources);
                try {
                    serialzed = JSON.stringify(resources)
                } catch(e) {
                    console.log("Mobify.combo.dehydrateCache error stringifying: " + 
                        e.message);
                    return;
                }
                try {
                    localStorage.setItem(Mobify.combo.cacheName, serialzed);
                } catch(e) {
                    /* If localStorage is full, try again with one less item, 
                       "co-operatively" */
                    setTimeout(function(){
                        evictAndStore(resources, attempts - 1)
                    },0);
                }
            }
        }
        /* evict one item from a set of resources */
        function evictOne(resources) {
            /* I FOUND YOU FIRST cache eviction policy, bad, but fast! REPLACE ME */
            for(var i in resources) {
                if(resources.hasOwnProperty(i)) {
                    delete resources[i];
                    return;
                }
            }
        }
        
        if(localStorageAvailable) {
            /* start by shallow copying the global resources dictionary, since 
               we're going to modify it, but not its properties */
            for(var i in resources) {
                if(resources.hasOwnProperty(i)) {
                    toBeCached[i] = resources[i];
                }
            }
            try {
                /* serialize the shallow copy */
                serialzed = JSON.stringify(toBeCached)
            } catch(e) {
                console.log("Mobify.combo.dehydrateCache error stringifying: " + 
                    e.message);
                return;
            }
            try {
                localStorage.setItem(Mobify.combo.cacheName, serialzed);
            } catch(e) {
                /* when localStorage is full, try again with one less item, 
                   "co-operatively" */
                setTimeout(function(){
                    evictAndStore(toBeCached, MAX_ATTEMPTS)
                },0);
            }
        }
    });
    
    /**
     * A function to create a data URI from a mobify combo resource object
     */
    function dataURI(resource) {
        return 'data:' + 
            resource.headers['content-type'] + 
            (!resource['text'] ? (';base64,' + resource.body) : 
                (',' + encodeURIComponent(resource.body)));
    }

    /**
     * Store a resoruce or an array of resources from the mobify combo service 
     * in our resource dictionary.
     */
    window.Mobify.combo.store || (window.Mobify.combo.store = function(r) {
        var resources = Mobify.combo.resources;
        
        function storeResource(r) {
            var url = r['url'];
            /* ensure this response was successfully fetched by the service */
            if(r.status == 'ready') {
                resources[url] = r;
            } else {
                console.log("Combo service failed to retrieve: %s", url);
            }
        }

        /* Array/individual resource branching */
        if(r instanceof Array) {
            /* store each item of the array */
            for(var i = 0; i < r.length; i++) {
                storeResource(r[i]);
            }
        } else {
            /* store the single item */
            storeResource(r);
        }
    });

    /**
     * Retrieve a JS resource from the combo.resources object and write out a 
     * script tag with it as a dataURI.
     */
    window.Mobify.combo.loadSync || (window.Mobify.combo.loadSync = function(url) {
        /* Note, document.writing the script tag is probably the only way to 
         * preserve execution order: 
         * http://blog.getify.com/ff4-script-loaders-and-order-preservation/
         */
        var r;
        
        if(r = Mobify.combo.resources[url]) {
            /* do a little accounting for caching purposes */
            r.lastUsed = Date.now();
            if(r.useCount) {
                r.useCount = r.useCount + 1
            } else {
                r.useCount = 1;
            }
            /* if we have the resource in our dictionary, use data uri rather 
            than a network uri */
            url = dataURI(r)
        }
        /* write out a script tag which contains either the data uri of the 
           resource or the original network uri if for some reason it was not in
           combo's resource dictionary*/
        document.write('<script type="text/javascript" src="' + url + '"><');
        document.write('/script>');
    });

    window.Mobify.combo.loadAsync || (
        window.Mobify.combo.loadAsync = function(url) {

        var r, s;
        s = document.createElement('SCRIPT');
        /* add it if we have it */
        if(r = window.Mobify.combo.resources('url')) {
            s.src = dataURI(r);
        } else {
            /* otherwise, make the browser get it itself */
            s.src = url;
        }
        document.body.appendChild(s);
    });

    window.Mobify.combo.storeAndloadAsync || (
        window.Mobify.combo.storeAndLoadAsync = function(resources) {

        window.Mobify.combo.store(resources);
        for(var i = 0; i < resources.length; i++) {
            window.Mobify.combo.loadAsync(resources[i]['url']);
        }
    });

 })();
 </script>
